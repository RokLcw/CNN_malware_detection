import json
import nltk
import os
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from PIL import Image
import pefile
import sys

# binary 파일 그대로 이미자화 하는 코드

data = pd.DataFrame()   # columns=['binary']

folder_path = "./Capstone_sample3(cuckoo)"
folder_lists = os.listdir(folder_path)


for folder in folder_lists: 
    cnt = 0
    file_path = os.path.join(folder_path, folder)
    file_lists = os.listdir(file_path)

    for file in file_lists:
        file_path2 = os.path.join(file_path, file)
        file_lists2 = os.listdir(file_path2)

        for file2 in file_lists2:
            binaryApiText = ""
            API_List = []
            result_List = []
            report_path = file_path2+"\\"+file2+"\\"+"reports"+"\\"+"report.json"
            print(report_path)
            with open(report_path) as report:
                data = json.load(report)

            for i in data["behavior"]["processes"]:
                if(data["target"]["file"]["name"] in i["process_name"] ):
                    for j in i["calls"]:
                        binaryApiText = binaryApiText + j["api"] + " "
                    break
            binanryApiList = nltk.word_tokenize(binaryApiText) # 공백으로 분리되어 있는 String들을 한 단어 씩 묶어서 리스트로

            API_List.append(binanryApiList[0])
            for i in range(len(binanryApiList)):
                flag = 0
                for j in range(len(API_List)):
                    if(API_List[j] == binanryApiList[i]):
                        result_List.append(j)
                        flag = 1
                        break
                if(flag == 1):
                    continue
                API_List.append(binanryApiList[i])
                result_List.append(len(API_List)-1)

            print("end API정리")

            # print("API List Len: ", len(API_List))
            # print("Result List Len: ", len(result_List))
            # print("binanryApiList Len: ", len(binanryApiList))
            # print("API LIST:", API_List)
            # print("Result LIST:", result_List)

            
            # print(binanryApiList)

            if(len(result_List) < 8*8):
                image = Image.new('L', (8, 8))
            elif(len(result_List) < 16*16):
                image = Image.new('L', (16, 16))
            elif(len(result_List) < 32*32):
                image = Image.new('L', (32, 32))
            elif(len(result_List) < 64*64):
                image = Image.new('L', (64, 64))
            elif(len(result_List) < 128*128):
                image = Image.new('L', (128, 128))
            elif(len(result_List) < 256*256):
                image = Image.new('L', (256, 256))
            elif(len(result_List) < 512*512):
                image = Image.new('L', (512, 512))
            elif(len(result_List) < 1024*1024):
                image = Image.new('L', (1024, 1024))
            elif(len(result_List) < 2048*2048):
                image = Image.new('L', (2048, 2048))
            elif(len(result_List) < 4096*4096):
                image = Image.new('L', (4096, 4096))
            elif(len(result_List) < 8192*8192):
                image = Image.new('L', (8192, 8192))

            image.putdata(result_List)
            
            # try: 
            #     image.putdata(result_List)
            # except:
            #     continue
            image = image.resize((64, 64))

            # file_name_path = file_path2+"\\"+file2+"\\"+"files.json"
            # file_name = []

            # print(file_name_path)

            # with open(file_name_path, "r") as f:
            #     file_name = json.loads(f)
            # print(file_name)

            # exit(1)

            if cnt < 188:
                if 'abnormal' in folder:
                    imagename = f"./CNN/API_call_order_IMG(Min_Size_8)/Train/{folder}/{cnt}.png"
                if 'normal' in folder:
                    imagename = f"./CNN/API_call_order_IMG(Min_Size_8)/Train/{folder}/{cnt}.png"
            else:
                if 'abnormal' in folder:
                    imagename = f"./CNN/API_call_order_IMG(Min_Size_8)/Test/{folder}/{cnt}.png"
                if 'normal' in folder:
                    imagename = f"./CNN/API_call_order_IMG(Min_Size_8)/Test/{folder}/{cnt}.png"
            
            image.save(imagename)
            # exit(1)

            cnt += 1

        print(folder, " cnt: ", cnt)

print("전처리 완료")